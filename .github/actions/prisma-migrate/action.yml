name: 'Prisma Migrate Deploy'
description: 'Run prisma migrate deploy across one or many databases with concurrency control and secret masking'
author: 'weprograpp'

inputs:
  database-url:
    description: 'Single database URL or JSON array of database URLs'
    required: true
  schema-path:
    description: 'Path to Prisma schema file (default: prisma/schema.prisma)'
    required: false
    default: 'prisma/schema.prisma'
  prisma-version:
    description: 'Prisma version to use (default: latest)'
    required: false
    default: 'latest'
  dry-run:
    description: 'Run in dry-run mode (preview changes without applying)'
    required: false
    default: 'false'
  working-directory:
    description: 'Working directory to run commands in (default: .)'
    required: false
    default: '.'

outputs:
  databases-migrated:
    description: 'Number of databases successfully migrated'
    value: ${{ steps.migrate.outputs.databases-migrated }}
  migration-summary:
    description: 'Summary of migration results'
    value: ${{ steps.migrate.outputs.migration-summary }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        echo "::group::Validating inputs"
        
        # Validate schema path exists
        if [ ! -f "${{ inputs.working-directory }}/${{ inputs.schema-path }}" ]; then
          echo "::error::Schema file not found at ${{ inputs.working-directory }}/${{ inputs.schema-path }}"
          exit 1
        fi
        
        # Validate database URLs
        DB_INPUT='${{ inputs.database-url }}'
        if [[ "$DB_INPUT" =~ ^\[.*\]$ ]]; then
          echo "Multiple database URLs detected"
          echo "db-type=multiple" >> $GITHUB_ENV
        else
          echo "Single database URL detected"
          echo "db-type=single" >> $GITHUB_ENV
        fi
        
        echo "::endgroup::"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Prisma CLI
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "::group::Installing Prisma CLI"
        
        if [ "${{ inputs.prisma-version }}" = "latest" ]; then
          npm install -g prisma
        else
          npm install -g prisma@${{ inputs.prisma-version }}
        fi
        
        echo "Prisma version: $(prisma --version)"
        echo "::endgroup::"

    - name: Parse database URLs and run migrations
      id: migrate
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "::group::Parsing database URLs and running migrations"
        
        # Initialize counters
        SUCCESS_COUNT=0
        TOTAL_COUNT=0
        MIGRATION_RESULTS=""
        
        # Function to run migration for a single database
        run_migration() {
          local db_url="$1"
          local db_index="$2"
          
          # Mask the database URL for security
          echo "::add-mask::$db_url"
          
          echo "::group::Database $db_index migration"
          echo "Running migration for database $db_index..."
          
          # Set DATABASE_URL for this migration
          export DATABASE_URL="$db_url"
          
          # Build prisma command
          PRISMA_CMD="prisma migrate deploy --schema=${{ inputs.schema-path }}"
          
          if [ "${{ inputs.dry-run }}" = "true" ]; then
            echo "üîç DRY RUN MODE: Preview changes only"
            # For dry run, we'll use prisma migrate diff or status
            if prisma migrate status --schema=${{ inputs.schema-path }} 2>/dev/null; then
              echo "‚úÖ Database $db_index: Migration status checked successfully"
              MIGRATION_RESULTS="${MIGRATION_RESULTS}Database $db_index: ‚úÖ Ready for migration (dry run)\n"
              ((SUCCESS_COUNT++))
            else
              echo "‚ùå Database $db_index: Migration check failed"
              MIGRATION_RESULTS="${MIGRATION_RESULTS}Database $db_index: ‚ùå Migration check failed (dry run)\n"
            fi
          else
            # Run actual migration
            if $PRISMA_CMD; then
              echo "‚úÖ Database $db_index: Migration completed successfully"
              MIGRATION_RESULTS="${MIGRATION_RESULTS}Database $db_index: ‚úÖ Migration completed\n"
              ((SUCCESS_COUNT++))
            else
              echo "‚ùå Database $db_index: Migration failed"
              MIGRATION_RESULTS="${MIGRATION_RESULTS}Database $db_index: ‚ùå Migration failed\n"
            fi
          fi
          
          echo "::endgroup::"
        }
        
        # Parse database URLs
        DB_INPUT='${{ inputs.database-url }}'
        
        if [ "${{ env.db-type }}" = "multiple" ]; then
          # Parse JSON array
          echo "Processing multiple database URLs..."
          
          # Use jq to parse JSON array
          echo "$DB_INPUT" | jq -r '.[]' | while IFS= read -r db_url; do
            ((TOTAL_COUNT++))
            run_migration "$db_url" "$TOTAL_COUNT"
          done
          
          # Since we're in a subshell, we need to recalculate
          SUCCESS_COUNT=0
          TOTAL_COUNT=0
          MIGRATION_RESULTS=""
          
          while IFS= read -r db_url; do
            ((TOTAL_COUNT++))
            
            # Mask the database URL
            echo "::add-mask::$db_url"
            
            export DATABASE_URL="$db_url"
            
            if [ "${{ inputs.dry-run }}" = "true" ]; then
              if prisma migrate status --schema=${{ inputs.schema-path }} >/dev/null 2>&1; then
                ((SUCCESS_COUNT++))
                MIGRATION_RESULTS="${MIGRATION_RESULTS}Database $TOTAL_COUNT: ‚úÖ Ready for migration (dry run)\n"
              else
                MIGRATION_RESULTS="${MIGRATION_RESULTS}Database $TOTAL_COUNT: ‚ùå Migration check failed (dry run)\n"
              fi
            else
              if prisma migrate deploy --schema=${{ inputs.schema-path }}; then
                ((SUCCESS_COUNT++))
                MIGRATION_RESULTS="${MIGRATION_RESULTS}Database $TOTAL_COUNT: ‚úÖ Migration completed\n"
              else
                MIGRATION_RESULTS="${MIGRATION_RESULTS}Database $TOTAL_COUNT: ‚ùå Migration failed\n"
              fi
            fi
          done < <(echo "$DB_INPUT" | jq -r '.[]')
          
        else
          # Single database URL
          echo "Processing single database URL..."
          TOTAL_COUNT=1
          
          # Mask the database URL
          echo "::add-mask::$DB_INPUT"
          
          export DATABASE_URL="$DB_INPUT"
          
          if [ "${{ inputs.dry-run }}" = "true" ]; then
            if prisma migrate status --schema=${{ inputs.schema-path }} >/dev/null 2>&1; then
              SUCCESS_COUNT=1
              MIGRATION_RESULTS="Database 1: ‚úÖ Ready for migration (dry run)\n"
            else
              MIGRATION_RESULTS="Database 1: ‚ùå Migration check failed (dry run)\n"
            fi
          else
            if prisma migrate deploy --schema=${{ inputs.schema-path }}; then
              SUCCESS_COUNT=1
              MIGRATION_RESULTS="Database 1: ‚úÖ Migration completed\n"
            else
              MIGRATION_RESULTS="Database 1: ‚ùå Migration failed\n"
            fi
          fi
        fi
        
        # Set outputs
        echo "databases-migrated=$SUCCESS_COUNT" >> $GITHUB_OUTPUT
        echo "migration-summary<<EOF" >> $GITHUB_OUTPUT
        echo -e "$MIGRATION_RESULTS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "::endgroup::"
        
        # Generate summary
        echo "## üóÑÔ∏è Prisma Migration Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Mode:** ${{ inputs.dry-run == 'true' && 'Dry Run' || 'Deploy' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Schema:** \`${{ inputs.schema-path }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Prisma Version:** ${{ inputs.prisma-version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Working Directory:** \`${{ inputs.working-directory }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Databases Processed:** $TOTAL_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "- **Successful:** $SUCCESS_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "- **Failed:** $((TOTAL_COUNT - SUCCESS_COUNT))" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Details" >> $GITHUB_STEP_SUMMARY
        echo -e "$MIGRATION_RESULTS" >> $GITHUB_STEP_SUMMARY
        
        # Exit with error if any migrations failed and not in dry-run mode
        if [ $SUCCESS_COUNT -ne $TOTAL_COUNT ] && [ "${{ inputs.dry-run }}" != "true" ]; then
          echo "::error::Some migrations failed. Check the logs for details."
          exit 1
        fi

branding:
  icon: 'database'
  color: 'blue'